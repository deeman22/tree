#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
class Solution {
public:
    
    class value {
        public:
        TreeNode *t;
        int ver ;
        
        value(TreeNode *tt, int vr){
            t = tt;
            ver = vr;
        }
    };
    static bool comp (value a1, value a2){
        return a1.t->val < a2.t->val;
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, vector<int>> mp;
        vector<vector<int>> ans;
        
        if(!root) return ans;
        queue<value> q;
        q.push(value(root, 0));
        
        
        while(!q.empty()){
            
            vector<value> temp;
            int n = q.size();
            for(int i = 0; i<n ; i++){
                value v1 = q.front(); 
                q.pop();
                if(v1.t->left)
                    q.push(value(v1.t->left, v1.ver-1));
                if(v1.t->right)
                    q.push(value(v1.t->right, v1.ver+1));
                temp.push_back(v1);
            }
            sort(temp.begin(), temp.end(), comp);
            
            for(int i =0; i<temp.size(); i++){
                mp[temp[i].ver].push_back(temp[i].t->val);
            }
        }
        for(auto i:mp){
            ans.push_back(i.second);
        }
        return ans;
        
    }
};
